{"version":3,"sources":["../src/keycache.ts"],"names":["Keycache","Map","store","peerId","key","storage","set","id","load","get","resetStorage","clear","KeyCache"],"mappings":";;AAGA;;;AAGA,MAAMA,QAAN,CAAe;AAAA;AAAA,qCACK,IAAIC,GAAJ,EADL;AAAA;;AAGNC,EAAAA,KAAP,CAAaC,MAAb,EAA6BC,GAA7B,EAAiD;AAC/C,SAAKC,OAAL,CAAaC,GAAb,CAAiBH,MAAM,CAACI,EAAxB,EAA4BH,GAA5B;AACD;;AAEMI,EAAAA,IAAP,CAAYL,MAAZ,EAA6C;AAC3C,QAAG,CAACA,MAAJ,EAAY;AACV,aAAO,IAAP;AACD;;AACD,WAAO,KAAKE,OAAL,CAAaI,GAAb,CAAiBN,MAAM,CAACI,EAAxB,KAA+B,IAAtC;AACD;;AAEMG,EAAAA,YAAP,GAA4B;AAC1B,SAAKL,OAAL,CAAaM,KAAb;AACD;;AAhBY;;AAoBf,MAAMC,QAAQ,GAAG,IAAIZ,QAAJ,EAAjB;AACA,SACEY,QADF","sourcesContent":["import {bytes, bytes32} from \"./@types/basic\";\nimport PeerId from \"peer-id\";\n\n/**\n * Storage for static keys of previously connected peers.\n */\nclass Keycache {\n  private storage = new Map<bytes, bytes32>();\n\n  public store(peerId: PeerId, key: bytes32): void {\n    this.storage.set(peerId.id, key);\n  }\n\n  public load(peerId?: PeerId): bytes32 | null {\n    if(!peerId) {\n      return null;\n    }\n    return this.storage.get(peerId.id) || null;\n  }\n\n  public resetStorage(): void {\n    this.storage.clear();\n  }\n\n}\n\nconst KeyCache = new Keycache();\nexport {\n  KeyCache,\n}\n"],"file":"keycache.js"}