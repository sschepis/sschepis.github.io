{"version":3,"sources":["../../src/proto/payload.d.ts"],"names":["NoiseHandshakePayload","pb"],"mappings":";;AACA;AACA;;;AAEE;;AAaA;AACA,QAAMA,qBAAN,CAA8D;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;GAhB/CC,E,KAAAA,E","sourcesContent":["import * as $protobuf from \"protobufjs\";\n/** Namespace pb. */\nexport namespace pb {\n\n  /** Properties of a NoiseHandshakePayload. */\n  interface INoiseHandshakePayload {\n\n    /** NoiseHandshakePayload identityKey */\n    identityKey?: (Uint8Array|null);\n\n    /** NoiseHandshakePayload identitySig */\n    identitySig?: (Uint8Array|null);\n\n    /** NoiseHandshakePayload data */\n    data?: (Uint8Array|null);\n  }\n\n  /** Represents a NoiseHandshakePayload. */\n  class NoiseHandshakePayload implements INoiseHandshakePayload {\n\n    /**\n         * Constructs a new NoiseHandshakePayload.\n         * @param [properties] Properties to set\n         */\n    constructor(properties?: pb.INoiseHandshakePayload);\n\n    /** NoiseHandshakePayload identityKey. */\n    public identityKey: Uint8Array;\n\n    /** NoiseHandshakePayload identitySig. */\n    public identitySig: Uint8Array;\n\n    /** NoiseHandshakePayload data. */\n    public data: Uint8Array;\n\n    /**\n         * Creates a new NoiseHandshakePayload instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns NoiseHandshakePayload instance\n         */\n    public static create(properties?: pb.INoiseHandshakePayload): pb.NoiseHandshakePayload;\n\n    /**\n         * Encodes the specified NoiseHandshakePayload message. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n         * @param message NoiseHandshakePayload message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n    public static encode(message: pb.INoiseHandshakePayload, writer?: $protobuf.Writer): $protobuf.Writer;\n\n    /**\n         * Encodes the specified NoiseHandshakePayload message, length delimited. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.\n         * @param message NoiseHandshakePayload message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n    public static encodeDelimited(message: pb.INoiseHandshakePayload, writer?: $protobuf.Writer): $protobuf.Writer;\n\n    /**\n         * Decodes a NoiseHandshakePayload message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns NoiseHandshakePayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): pb.NoiseHandshakePayload;\n\n    /**\n         * Decodes a NoiseHandshakePayload message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns NoiseHandshakePayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): pb.NoiseHandshakePayload;\n\n    /**\n         * Verifies a NoiseHandshakePayload message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n    public static verify(message: { [k: string]: any }): (string|null);\n\n    /**\n         * Creates a NoiseHandshakePayload message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns NoiseHandshakePayload\n         */\n    public static fromObject(object: { [k: string]: any }): pb.NoiseHandshakePayload;\n\n    /**\n         * Creates a plain object from a NoiseHandshakePayload message. Also converts values to other types if specified.\n         * @param message NoiseHandshakePayload\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n    public static toObject(message: pb.NoiseHandshakePayload, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n    /**\n         * Converts this NoiseHandshakePayload to JSON.\n         * @returns JSON object\n         */\n    public toJSON(): { [k: string]: any };\n  }\n}\n"],"file":"payload.d.js"}