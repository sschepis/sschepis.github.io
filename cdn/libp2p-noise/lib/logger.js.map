{"version":3,"sources":["../src/logger.ts"],"names":["debug","DUMP_SESSION_KEYS","logger","keyLogger","logLocalStaticKeys","s","publicKey","toString","privateKey","logLocalEphemeralKeys","e","logRemoteStaticKey","rs","logRemoteEphemeralKey","re","logCipherState","session","cs1","cs2","n","k"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,aAAhC;AAIA,OAAO,MAAMC,MAAM,GAAGF,KAAK,CAAC,cAAD,CAApB;AAEP,IAAIG,SAAJ;;AACA,IAAGF,iBAAH,EAAqB;AACnBE,EAAAA,SAAS,GAAGD,MAAZ;AACD,CAFD,MAGK;AACHC,EAAAA,SAAS,GAAG,MAAM;AAAE;AAAkB,GAAtC;AACD;;AAED,OAAO,SAASC,kBAAT,CAA4BC,CAA5B,EAA8C;AACnDF,EAAAA,SAAS,mCAA4BE,CAAC,CAACC,SAAF,CAAYC,QAAZ,CAAqB,KAArB,CAA5B,EAAT;AACAJ,EAAAA,SAAS,oCAA6BE,CAAC,CAACG,UAAF,CAAaD,QAAb,CAAsB,KAAtB,CAA7B,EAAT;AACD;AAED,OAAO,SAASE,qBAAT,CAA+BC,CAA/B,EAA2D;AAChE,MAAGA,CAAH,EAAK;AACHP,IAAAA,SAAS,sCAA+BO,CAAC,CAACJ,SAAF,CAAYC,QAAZ,CAAqB,KAArB,CAA/B,EAAT;AACAJ,IAAAA,SAAS,uCAAgCO,CAAC,CAACF,UAAF,CAAaD,QAAb,CAAsB,KAAtB,CAAhC,EAAT;AACD,GAHD,MAII;AACFJ,IAAAA,SAAS,CAAC,+BAAD,CAAT;AACD;AACF;AAED,OAAO,SAASQ,kBAAT,CAA4BC,EAA5B,EAA8C;AACnDT,EAAAA,SAAS,oCAA6BS,EAAE,CAACL,QAAH,CAAY,KAAZ,CAA7B,EAAT;AACD;AAED,OAAO,SAASM,qBAAT,CAA+BC,EAA/B,EAAiD;AACtDX,EAAAA,SAAS,uCAAgCW,EAAE,CAACP,QAAH,CAAY,KAAZ,CAAhC,EAAT;AACD;AAED,OAAO,SAASQ,cAAT,CAAwBC,OAAxB,EAAqD;AAC1D,MAAGA,OAAO,CAACC,GAAR,IAAeD,OAAO,CAACE,GAA1B,EAA8B;AAC5Bf,IAAAA,SAAS,0BAAmBa,OAAO,CAACC,GAAR,CAAYE,CAA/B,cAAoCH,OAAO,CAACC,GAAR,CAAYG,CAAZ,CAAcb,QAAd,CAAuB,KAAvB,CAApC,EAAT;AACAJ,IAAAA,SAAS,0BAAmBa,OAAO,CAACE,GAAR,CAAYC,CAA/B,cAAoCH,OAAO,CAACE,GAAR,CAAYE,CAAZ,CAAcb,QAAd,CAAuB,KAAvB,CAApC,EAAT;AACD,GAHD,MAII;AACFJ,IAAAA,SAAS,CAAC,uBAAD,CAAT;AACD;AACF","sourcesContent":["import debug from \"debug\";\nimport {DUMP_SESSION_KEYS} from './constants';\nimport { KeyPair } from \"./@types/libp2p\";\nimport { NoiseSession, SymmetricState } from \"./@types/handshake\";\n\nexport const logger = debug('libp2p:noise');\n\nlet keyLogger;\nif(DUMP_SESSION_KEYS){\n  keyLogger = logger\n}\nelse {\n  keyLogger = () => { /* do nothing */ }\n}\n\nexport function logLocalStaticKeys(s: KeyPair): void {\n  keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${s.publicKey.toString('hex')}`)\n  keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${s.privateKey.toString('hex')}`)\n}\n\nexport function logLocalEphemeralKeys(e: KeyPair|undefined): void {\n  if(e){\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${e.publicKey.toString('hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${e.privateKey.toString('hex')}`)\n  }\n  else{\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey(rs: Buffer): void {\n  keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${rs.toString('hex')}`)\n}\n\nexport function logRemoteEphemeralKey(re: Buffer): void {\n  keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${re.toString('hex')}`)\n}\n\nexport function logCipherState(session: NoiseSession): void {\n  if(session.cs1 && session.cs2){\n    keyLogger(`CIPHER_STATE_1 ${session.cs1.n} ${session.cs1.k.toString('hex')}`)\n    keyLogger(`CIPHER_STATE_2 ${session.cs2.n} ${session.cs2.k.toString('hex')}`)\n  }\n  else{\n    keyLogger('Missing cipher state.')\n  }\n}\n"],"file":"logger.js"}