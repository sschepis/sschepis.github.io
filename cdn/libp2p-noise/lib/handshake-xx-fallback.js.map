{"version":3,"sources":["../src/handshake-xx-fallback.ts"],"names":["Buffer","XXHandshake","decodePayload","getPeerIdFromPayload","verifySignedPayload","logger","logLocalEphemeralKeys","logRemoteEphemeralKey","logRemoteStaticKey","decode0","decode1","XXFallbackHandshake","constructor","isInitiator","payload","prologue","staticKeypair","connection","initialMsg","remotePeer","ephemeralKeys","handshake","propose","xx","sendMessage","session","alloc","hs","e","receivedMessageBuffer","valid","recvMessage","ne","ns","ciphertext","Error","re","exchange","plaintext","rs","decodedPayload","setRemoteEarlyData","data","message"],"mappings":"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","sourcesContent":["import {Buffer} from \"buffer\";\nimport {XXHandshake} from \"./handshake-xx\";\nimport {XX} from \"./handshakes/xx\";\nimport {KeyPair} from \"./@types/libp2p\";\nimport {bytes, bytes32} from \"./@types/basic\";\nimport {decodePayload, getPeerIdFromPayload, verifySignedPayload} from \"./utils\";\nimport {logger, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey} from \"./logger\";\nimport {WrappedConnection} from \"./noise\";\nimport {decode0, decode1} from \"./encoder\";\nimport PeerId from \"peer-id\";\n\nexport class XXFallbackHandshake extends XXHandshake {\n  private ephemeralKeys?: KeyPair;\n  private initialMsg: bytes;\n\n  constructor(\n    isInitiator: boolean,\n    payload: bytes,\n    prologue: bytes32,\n    staticKeypair: KeyPair,\n    connection: WrappedConnection,\n    initialMsg: bytes,\n    remotePeer?: PeerId,\n    ephemeralKeys?: KeyPair,\n    handshake?: XX,\n  ) {\n    super(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake);\n    if (ephemeralKeys) {\n      this.ephemeralKeys = ephemeralKeys;\n    }\n    this.initialMsg = initialMsg;\n  }\n\n  // stage 0\n  public async propose(): Promise<void> {\n    if (this.isInitiator) {\n      this.xx.sendMessage(this.session, Buffer.alloc(0), this.ephemeralKeys);\n      logger(\"XX Fallback Stage 0 - Initialized state as the first message was sent by initiator.\");\n      logLocalEphemeralKeys(this.session.hs.e)\n    } else {\n      logger(\"XX Fallback Stage 0 - Responder decoding initial msg from IK.\");\n      const receivedMessageBuffer = decode0(this.initialMsg);\n      const {valid} = this.xx.recvMessage(this.session, {\n        ne: receivedMessageBuffer.ne,\n        ns: Buffer.alloc(0),\n        ciphertext: Buffer.alloc(0),\n      });\n      if(!valid) {\n        throw new Error(\"xx fallback stage 0 decryption validation fail\");\n      }\n      logger(\"XX Fallback Stage 0 - Responder used received message from IK.\");\n      logRemoteEphemeralKey(this.session.hs.re)\n    }\n  }\n\n  // stage 1\n  public async exchange(): Promise<void> {\n    if (this.isInitiator) {\n      const receivedMessageBuffer = decode1(this.initialMsg);\n      const {plaintext, valid} = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if(!valid) {\n        throw new Error(\"xx fallback stage 1 decryption validation fail\");\n      }\n      logger('XX Fallback Stage 1 - Initiator used received message from IK.');\n      logRemoteEphemeralKey(this.session.hs.re)\n      logRemoteStaticKey(this.session.hs.rs)\n\n      logger(\"Initiator going to check remote's signature...\");\n      try {\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data)\n      } catch (e) {\n        throw new Error(`Error occurred while verifying signed payload from responder: ${e.message}`);\n      }\n      logger(\"All good with the signature!\");\n    } else {\n      logger(\"XX Fallback Stage 1 - Responder start\");\n      await super.exchange();\n      logger(\"XX Fallback Stage 1 - Responder end\");\n    }\n  }\n}\n"],"file":"handshake-xx-fallback.js"}